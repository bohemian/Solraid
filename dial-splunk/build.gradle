buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven {
            url 'https://packages.atlassian.com/maven/private'
            credentials {
                username = System.getenv("ARTIFACTORY_USERNAME")
                password = System.getenv("ARTIFACTORY_PASSWORD")
            }
        }
    }
}

plugins {
    id 'java-library'
    id "maven-publish"
    id 'groovy'
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.spotbugs' version "${spotbugsVersion}"
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.springframework.boot" version "3.2.5"
}

version "${publishedVersion}"

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
    maven {
        name "maven-atlassian-com"
        url "https://packages.atlassian.com/maven/repository/internal"
    }
//    maven {
//        def releasesRepoUrl = uri("https://packages.atlassian.com/mvn/maven-private")
//        def snapshotsRepoUrl = uri("https://packages.atlassian.com/mvn/maven-private-snapshot")
//        url = version.toString().endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
//        credentials {
//            username = System.getenv("ARTIFACTORY_USERNAME")
//            password = System.getenv("ARTIFACTORY_PASSWORD")
//        }
//    }
}

dependencyManagement {
    imports {
        mavenBom "io.atlassian.micros.contrib:micros-spring-boot-bom:${microsSpringBootVersion}"
    }
}

checkstyle {
    toolVersion = checkStyleVersion
}

spotbugs {
    spotbugsTest.enabled = false // don't find bugs in tests
    excludeFilter.set(
            file("${projectDir}/config/spotbugs/spotbugs-config.xml")
    )
}

configurations {
    includedLibs // configuration that defines jars to copy into lib
}

jar {
    enabled = true
    // Remove `plain` postfix from jar file name
    archiveClassifier.set('')
    into('lib') {
        from configurations.includedLibs
    }
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // needed to suppress useless lombok-related spotbugs errors
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.8.6'

    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    implementation "io.micrometer:micrometer-tracing:${micrometerVersion}"
//    implementation "io.github.resilience4j:resilience4j-micrometer:${resilience4jVersion}"

    implementation "org.springframework:spring-context:${sprintFrameworkVersion}"

    includedLibs "jakarta.validation:jakarta.validation-api:${jakartaValidationVersion}"
    implementation "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"
    implementation 'org.slf4j:slf4j-api:2.0.13'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'

    implementation 'org.apache.commons:commons-lang3:3.14.0'

    implementation "org.springframework:spring-web:${sprintFrameworkVersion}"

    implementation group: 'com.jayway.jsonpath', name: 'json-path', version: '2.9.0'

    // mandatory dependencies for using Spock
    implementation platform('org.apache.groovy:groovy-bom:4.0.21')
    implementation 'org.apache.groovy:groovy'
    testImplementation platform("org.spockframework:spock-bom:2.3-groovy-4.0")
    testImplementation "org.spockframework:spock-core"

    // to instantiate a jakarta validator within tests
    testImplementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"

    // optional dependencies for using Spock
    testRuntimeOnly "cglib:cglib-nodep:3.3.0"          // allows mocking of classes (in addition to interfaces)
//    testRuntimeOnly "org.objenesis:objenesis:3.4"    // allows mocking of classes without defaul]t constructor (together with CGLIB)
    testImplementation 'cglib:cglib:3.3.0'             // required to get tests to run in intellij

    // nice to have
    implementation 'org.jetbrains:annotations:15.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed" // , "started"
    }
}

publishing {
    publications {
        maven(MavenPublication) {

            groupId 'io.atlassian'
            artifactId 'guard-commons'
            version project.properties['guard-commons.version']

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.runtimeClasspath.allDependencies.each { dependency ->
                    if (!(dependency instanceof SelfResolvingDependency)) {
                        def dependencyNode = dependenciesNode.appendNode("dependency")
                        dependencyNode.appendNode("groupId", dependency.group)
                        dependencyNode.appendNode("artifactId", dependency.name)
                        dependencyNode.appendNode("version", dependency.version)
                        dependencyNode.appendNode("scope", "compile")
                    }
                }
            }

            artifact tasks.jar
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = uri("https://packages.atlassian.com/mvn/maven-private")
            def snapshotsRepoUrl = uri("https://packages.atlassian.com/mvn/maven-private-snapshot")
            url = version.toString().endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("ARTIFACTORY_USERNAME")
                password = System.getenv("ARTIFACTORY_PASSWORD")
            }
        }
    }
}
